# Errors

## error_enframe_value_null()

The `value` argument to `enframe()` cannot be NULL.


## error_enframe_has_dim()

`x` must not have more than one dimension. `length(dim(x))` must be zero or one, not 4.


## error_need_scalar_column_index()

Must use a scalar in `[[`.


## error_na_column_index()

Can't use NA as column index with `[` at positions 1, 2, 3.


## error_unsupported_column_index()

Must subset columns with an index vector.


## error_large_column_index()

Cannot subset columns 4, 5 in tibble with 3 columns.

Cannot subset column 5 in tibble with 3 columns.

Cannot subset columns 4, 5 in tibble with 1 column.

Cannot subset column 5 in tibble with 1 column.


## error_small_column_index()

Cannot exclude columns 4, 5 in tibble with 3 columns.

Cannot exclude column 5 in tibble with 3 columns.

Cannot exclude columns 4, 5 in tibble with 1 column.

Cannot exclude column 5 in tibble with 1 column.


## error_unknown_column_names()

Can't find column `a` in `.data`.

Can't find columns `b`, `c` in `.data`.

Can't find columns `A`, `B`, `C`, `D`, `E`, … (and 21 more) in `.data`.


## error_existing_column_names()

Column `a` already exists in `.data`.

Columns `b`, `c` already exist in `.data`.

Columns `A`, `B`, `C`, `D`, `E`, … (and 21 more) already exist in `.data`.


## error_assign_columns_non_na_only()

Can't use NA as column index in a tibble for assignment.


## error_assign_columns_non_missing_only()

Column index is required for tibbles in `[[`.


## error_new_columns_at_end_only()

Can't assign columns 7, 8 in a tibble with 5 columns.

Can't assign column 7 in a tibble with 5 columns.

Can't assign columns 7, 8 in a tibble with 1 column.

Can't assign column 7 in a tibble with 1 column.


## error_duplicate_column_subscript_for_assignment()

Column index 1 is used more than once for assignment.

Column indexes 1, 2 are used more than once for assignment.


## error_assign_rows_non_na_only()

Can't use NA as row index in a tibble for assignment.


## error_new_rows_at_end_only()

Can't assign rows 7, 8 in a tibble with 5 rows.

Can't assign row 7 in a tibble with 5 rows.

Can't assign rows 7, 8 in a tibble with 1 row.

Can't assign row 7 in a tibble with 1 row.


## error_duplicate_row_subscript_for_assignment()

Row index 1 is used more than once for assignment.

Row indexes 1, 2 are used more than once for assignment.


## error_add_rows_to_grouped_df()

Can't add rows to grouped data frames.


## error_inconsistent_new_rows()

New rows in `add_row()` must use columns that already exist:
* Can't find column `a` in `.data`.

New rows in `add_row()` must use columns that already exist:
* Can't find columns `b`, `c` in `.data`.

New rows in `add_row()` must use columns that already exist:
* Can't find columns `A`, `B`, `C`, `D`, `E`, … (and 21 more) in `.data`.


## error_names_must_be_non_null()

The `names` must not be `NULL`.
Use .name_repair to specify repair.

The `names` must not be `NULL`.


## error_names_must_have_length()

The `names` must have length 3, not 5.


## error_column_must_be_named()

Column 1 must be named.
Use .name_repair to specify repair.

Columns 2, 3 must be named.
Use .name_repair to specify repair.

Columns 1, 2, 3, 4, 5, … (and 21 more) must be named.
Use .name_repair to specify repair.

Columns 4, 5, 6 must be named.


## error_column_must_not_be_dot_dot()

Column `a` must not have names of the form ... or ..j.

Columns `b`, `c` must not have names of the form ... or ..j.
Use .name_repair to specify repair.

Columns `A`, `B`, `C`, `D`, `E`, … (and 21 more) must not have names of the form ... or ..j.
Use .name_repair to specify repair.


## error_column_names_must_be_unique()

Column name `a` must not be duplicated.

Column names `b`, `c` must not be duplicated.
Use .name_repair to specify repair.

Column names `A`, `B`, `C`, `D`, `E`, … (and 21 more) must not be duplicated.
Use .name_repair to specify repair.


## error_column_names_must_be_syntactic()

Column name `a` must be syntactic.

Column names `b`, `c` must be syntactic.
Use .name_repair to specify repair.

Column names `A`, `B`, `C`, `D`, `E`, … (and 21 more) must be syntactic.
Use .name_repair to specify repair.


## error_column_must_be_vector()

All columns in a tibble must be vectors:
* Column `a` is environment

All columns in a tibble must be vectors:
* Column 3 is environment

All columns in a tibble must be vectors:
* Column `b` is name
* Column `c` is NULL

All columns in a tibble must be vectors:
* Column 1 is QQ
* Column 2 is VV
* Column `A` is a
* Column `B` is b
* Column `C` is c
* … and 23 more problems


## error_inconsistent_cols()

Tibble columns must have consistent sizes, only values of size one are recycled:
* Size 10: Requested with `uvw` argument
* Size 3: Column `c`
* Size 4: Columns `a`, `b`

Tibble columns must have consistent sizes, only values of size one are recycled:
* Size 10: Requested with `xyz` argument
* Size 2: Columns `a`, `b`
* Size 3: Column `c`

Tibble columns must have consistent sizes, only values of size one are recycled:
* Size 2: Columns `a`, `b`
* Size 3: Column `c`

Tibble columns must have consistent sizes, only values of size one are recycled:
* Size 10: Requested with `uvw` argument
* Size 3: Column at position 3
* Size 4: Columns at positions 1, 2

Tibble columns must have consistent sizes, only values of size one are recycled:
* Size 10: Requested with `xyz` argument
* Size 2: Columns at positions 1, 2
* Size 3: Column at position 3

Tibble columns must have consistent sizes, only values of size one are recycled:
* Size 2: Columns at positions 1, 2
* Size 3: Column at position 3


## error_inconsistent_new_cols()

New columns in `add_column()` must be consistent with `.data`:
* `.data` has 10 rows
* New column contributes 2 rows

New columns in `add_column()` must be consistent with `.data`:
* `.data` has 1 row
* New columns contribute 3 rows


## error_duplicate_new_cols()

Can't add duplicate columns with `add_column()`:
* Column `a` already exists in `.data`.

Can't add duplicate columns with `add_column()`:
* Columns `b`, `c` already exist in `.data`.

Can't add duplicate columns with `add_column()`:
* Columns `A`, `B`, `C`, `D`, `E`, … (and 21 more) already exist in `.data`.


## error_both_before_after()

Can't specify both `.before` and `.after`.


## error_already_has_rownames()

`df` must be a data frame without row names in `column_to_rownames()`.


## error_glimpse_infinite_width()

`glimpse()` requires a finite value for the `width` argument.


## error_tribble_needs_columns()

`tribble()` needs to specify at least one column using the `~name` syntax.


## error_tribble_lhs_column_syntax()

All column specifications in `tribble()` must use the `~name` syntax.
* Found `lhs` on the left-hand side of `~`.


## error_tribble_rhs_column_syntax()

All column specifications in `tribble()` must use the `~name` or `~"name"` syntax.
* Found `a + b` on the right-hand side of `~`.


## error_tribble_non_rectangular()

`tribble()` must be used with rectangular data:
* Found 5 columns.
* Found 17 cells.
* 17 is not an integer multiple of 5.


## error_frame_matrix_list()

All values in `frame_matrix()` must be atomic:
* Found list-valued elements at positions 2, 3, 4.


## error_tibble_row_size_one()

All vectors in `tibble_row()` must be size one, use `list()` or `list_of()` to wrap.
* Column `foo` is of size 7.


## error_as_tibble_needs_argument()

Must pass an argument to `as_tibble()`.


## error_new_tibble_must_be_list()

Must pass a list as `x` argument to `new_tibble()`.


## error_new_tibble_needs_class()

Must pass a `class` argument instead of `subclass` to `new_tibble()`.


## error_new_tibble_needs_nrow()

Must pass a scalar integer as `nrow` argument to `new_tibble()`.
