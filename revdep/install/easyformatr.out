* installing *source* package ‘easyformatr’ ...
** package ‘easyformatr’ successfully unpacked and MD5 sums checked
** R
** inst
** tests
** preparing package for lazy loading
Joining, by = "code"

 *** caught segfault ***
address (nil), cause 'unknown'

Traceback:
 1: .Call("bindrcpp_callback_symbol", PACKAGE = "bindrcpp", name,     arg)
 2: fun(name, ...)
 3: (function (value) {    if (!missing(value)) {        stop("Binding is read-only.", call. = FALSE)    }    fun(name, ...)})()
 4: envlist(e)
 5: (function (e) {    if (is.environment(e)) {        name <- table$getname(e)        if (is.null(name)) {            name <- table$insert(e)            data <- list(bindings = envlist(e), enclos = parent.env(e),                 attributes = attributes(e), isS4 = isS4(e), locked = environmentIsLocked(e))            key <- lazyLoadDBinsertValue(data, datafile, ascii,                 compress, envhook)            assign(name, key, envir = envenv)        }        name    }})(<environment>)
 6: lazyLoadDBinsertValue(data, datafile, ascii, compress, envhook)
 7: (function (e) {    if (is.environment(e)) {        name <- table$getname(e)        if (is.null(name)) {            name <- table$insert(e)            data <- list(bindings = envlist(e), enclos = parent.env(e),                 attributes = attributes(e), isS4 = isS4(e), locked = environmentIsLocked(e))            key <- lazyLoadDBinsertValue(data, datafile, ascii,                 compress, envhook)            assign(name, key, envir = envenv)        }        name    }})(<environment>)
 8: lazyLoadDBinsertValue(data, datafile, ascii, compress, envhook)
 9: (function (e) {    if (is.environment(e)) {        name <- table$getname(e)        if (is.null(name)) {            name <- table$insert(e)            data <- list(bindings = envlist(e), enclos = parent.env(e),                 attributes = attributes(e), isS4 = isS4(e), locked = environmentIsLocked(e))            key <- lazyLoadDBinsertValue(data, datafile, ascii,                 compress, envhook)            assign(name, key, envir = envenv)        }        name    }})(<environment>)
10: lazyLoadDBinsertValue(data, datafile, ascii, compress, envhook)
11: (function (e) {    if (is.environment(e)) {        name <- table$getname(e)        if (is.null(name)) {            name <- table$insert(e)            data <- list(bindings = envlist(e), enclos = parent.env(e),                 attributes = attributes(e), isS4 = isS4(e), locked = environmentIsLocked(e))            key <- lazyLoadDBinsertValue(data, datafile, ascii,                 compress, envhook)            assign(name, key, envir = envenv)        }        name    }})(<environment>)
12: lazyLoadDBinsertValue(data, datafile, ascii, compress, envhook)
13: (function (e) {    if (is.environment(e)) {        name <- table$getname(e)        if (is.null(name)) {            name <- table$insert(e)            data <- list(bindings = envlist(e), enclos = parent.env(e),                 attributes = attributes(e), isS4 = isS4(e), locked = environmentIsLocked(e))            key <- lazyLoadDBinsertValue(data, datafile, ascii,                 compress, envhook)            assign(name, key, envir = envenv)        }        name    }})(<environment>)
14: lazyLoadDBinsertVariable(vars[i], from, datafile, ascii, compress,     envhook)
15: makeLazyLoadDB(ns, dbbase, compress = compress)
16: code2LazyLoadDB(package, lib.loc = lib.loc, keep.source = keep.source,     compress = compress)
17: makeLazyLoading(pkg_name, lib, keep.source = keep.source)
18: doTryCatch(return(expr), name, parentenv, handler)
19: tryCatchOne(expr, names, parentenv, handlers[[1L]])
20: tryCatchList(expr, classes, parentenv, handlers)
21: tryCatch(expr, error = function(e) {    call <- conditionCall(e)    if (!is.null(call)) {        if (identical(call[[1L]], quote(doTryCatch)))             call <- sys.call(-4L)        dcall <- deparse(call)[1L]        prefix <- paste("Error in", dcall, ": ")        LONG <- 75L        msg <- conditionMessage(e)        sm <- strsplit(msg, "\n")[[1L]]        w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")        if (is.na(w))             w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L],                 type = "b")        if (w > LONG)             prefix <- paste0(prefix, "\n  ")    }    else prefix <- "Error : "    msg <- paste0(prefix, conditionMessage(e), "\n")    .Internal(seterrmessage(msg[1L]))    if (!silent && identical(getOption("show.error.messages"),         TRUE)) {        cat(msg, file = stderr())        .Internal(printDeferredWarnings())    }    invisible(structure(msg, class = "try-error", condition = e))})
22: try({    suppressPackageStartupMessages(.getRequiredPackages(quietly = TRUE))    makeLazyLoading(pkg_name, lib, keep.source = keep.source)})
23: do_install_source(pkg_name, instdir, pkg, desc)
24: do_install(pkg)
25: tools:::.install_packages()
An irrecoverable exception occurred. R is aborting now ...
Segmentation fault (core dumped)
