% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add.R
\name{add_column}
\alias{add_column}
\title{Add columns to a data frame}
\usage{
add_column(.data, ..., .before = NULL, .after = NULL)
}
\arguments{
\item{.data}{Data frame to append to.}

\item{...}{Name-value pairs, passed on to \code{\link[=tibble]{tibble()}}. All values must have
one element for each row in the data frame, or be of length 1.
These arguments are passed on to \code{\link[=tibble]{tibble()}}, and therefore also support
unquote via \verb{!!} and unquote-splice via \verb{!!!}. However, unlike in
\pkg{dplyr} verbs, columns in \code{.data} are not available for the
expressions. Use \code{\link[dplyr:mutate]{dplyr::mutate()}} if you need to add a column based on
existing data.}

\item{.before, .after}{One-based column index or column name where to add the
new columns, default: after last column.}
}
\description{
\lifecycle{questioning}

This is a convenient way to add one or more columns to an existing data
frame.
}
\section{Life cycle}{

It is unclear we should have an \code{add_column()} function.
\code{dplyr::mutate()} just added the arguments \code{.before} and \code{.after}.
See \url{https://github.com/tidyverse/dplyr/pull/4774} and
\url{https://github.com/tidyverse/dplyr/issues/2047} for details.
}

\examples{
# add_column ---------------------------------
df <- tibble(x = 1:3, y = 3:1)

df \%>\% add_column(z = -1:1, w = 0)
df \%>\% add_column(z = -1:1, .before = "y")

# You can't overwrite existing columns
\dontrun{
df \%>\% add_column(x = 4:6)
}
# You can't create new observations
\dontrun{
df \%>\% add_column(z = 1:5)
}
}
\seealso{
Other addition: 
\code{\link{add_row}()}
}
\concept{addition}
