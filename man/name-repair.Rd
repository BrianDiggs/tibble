% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repair-names.R
\name{name-repair}
\alias{name-repair}
\alias{tidy_names}
\alias{set_tidy_names}
\alias{repair_names}
\title{Repair the names of a vector}
\usage{
tidy_names(name, quiet = FALSE)

set_tidy_names(x, quiet = FALSE)

repair_names(x, prefix = "V", sep = "")
}
\arguments{
\item{name}{A \code{names} attribute, usually a character vector.}

\item{quiet}{Whether to suppress messages about name repair.}

\item{x}{A vector.}

\item{prefix}{A string, the prefix to use for new column names.}

\item{sep}{A string inserted between the column name and de-duplicating
number.}
}
\value{
\code{x} with repaired names or a repaired version of \code{name}.
}
\description{
tibble implements several, increasing levels of name repair for vectors,
exposed via the \code{.name_repair} argument (TODO: re-visit all this thinking
about tibble's support for lists and not just tibbles):
\itemize{
\item \code{minimal} names exist, i.e. the \code{names} attribute is not \code{NULL} and no
individual name is \code{NA}. The name of an unnamed element is \code{""}. Enforced
internally by \code{\link[=tibble]{tibble()}} and \code{\link[=as_tibble]{as_tibble()}} and there is no opt-out. A
convenient consequence is that \code{names(x)} returns a character vector of the
correct length, suitable for other name repair strategies. TODO: decide if
this should include replacing \code{NA} names with \code{""}
\item \code{valid} names contain no empty names (literally, no \code{""}s) and no
duplicate names. Accomplished by appending a suffix of the form \code{..j} where
\code{j} is the position. The objective is to ensure that any variable in a
data.frame can be identified, uniquely, by its name.
\item \code{tidy} names are \code{valid} and syntactic, meaning they fulfill these
criteria laid out in \code{\link[=make.names]{make.names()}}:
\itemize{
\item Consist of letters, numbers and the dot or underline characters and
start with a letter or the dot not followed by a number.
\item Not a reserved word.
}
}

\code{tidy`` names are easy to use "as is" in code. They do not require quoting and they play well with nonstandard evaluation, such as list indexing via}$\code{. TODO: highlight how munging differs from}make.names()\code{, i.e. uses conventions more consistent with}valid` names and the tidyverse. TODO:
something about suffix reorganization.
\itemize{
\item Functions that offer a \code{.name_repair} argument accept a user-supplied
function for name repair.
}

All \code{tidy} names are \code{valid}, all \code{valid} names are \code{minimal}.

\code{repair_names()} is an older function with different renaming
heuristics and is being deprecated. In new code, use \code{as_tibble()} and
specify a \code{.name_repair} strategy.
}
\examples{
# Works for lists and vectors, too:
set_tidy_names(3:5)
set_tidy_names(list(3, 4, 5))

# Clean data frames are left unchanged:
set_tidy_names(mtcars)

# By default, all rename operations are printed to the console:
tbl <- as_tibble(structure(list(3, 4, 5), class = "data.frame"), .name_repair = "none")
set_tidy_names(tbl)

# Alternatively, use tidy_names() to assign the result manually:
new_names <- tidy_names(names(tbl))
rlang::set_names(tbl, new_names)

# Optionally, names can be made syntactic:
tidy_names("a b")
}
