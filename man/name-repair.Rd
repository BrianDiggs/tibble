% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repair-names.R
\name{name-repair}
\alias{name-repair}
\alias{rationalize_names}
\alias{minimal_names}
\alias{valid_names}
\alias{tidy_names}
\alias{set_minimal_names}
\alias{set_valid_names}
\alias{set_tidy_names}
\alias{check_minimal}
\alias{check_minimal_names}
\alias{check_valid}
\alias{check_valid_names}
\alias{repair_names}
\title{Repair the names of a vector}
\usage{
rationalize_names(x, .name_repair)

minimal_names(name, n)

valid_names(name, quiet = FALSE)

tidy_names(name, quiet = FALSE)

set_minimal_names(x)

set_valid_names(x, quiet = FALSE)

set_tidy_names(x, quiet = FALSE)

check_minimal(name)

check_minimal_names(x)

check_valid(name)

check_valid_names(x)

repair_names(x, prefix = "V", sep = "")
}
\arguments{
\item{x}{A vector.}

\item{name}{A \code{names} attribute, usually a character vector.}

\item{n}{Specifies output length; consulted only when \code{name} is \code{NULL}.}

\item{quiet}{Whether to suppress messages about name repair.}

\item{prefix}{A string, the prefix to use for new column names.}

\item{sep}{A string inserted between the column name and de-duplicating
number.}
}
\value{
\code{x} with repaired names.
}
\description{
tibble implements several, increasing levels of name repair for vectors
(TODO: re-visit all this thinking about tibble's support for lists and not
just tibbles):
\itemize{
\item \code{minimal} names exist, i.e. the \code{names} attribute is not \code{NULL}.
Accomplished by setting all names to \code{""}. Enforced internally by
\code{\link[=tibble]{tibble()}} and \code{\link[=as_tibble]{as_tibble()}} and there is no opt-out. The objective is to
produce a substrate of the correct length for other name repair strategies.
TODO: decide if this should include replacing \code{NA} names with \code{""}
\item \code{valid} names contain no empty names (no \code{NA}s, no \code{""}s) and no
duplicate names. Accomplished by appending a suffix of the form \code{..j} where
\code{j} is the position. The objective is to ensure that any variable in a
data.frame can be identified, uniquely, by its name.
\item \code{tidy} names are \code{valid} and also fulfill these criteria laid out in
\code{\link[=make.names]{make.names()}}:
\itemize{
\item Consist of letters, numbers and the dot or underline characters and
starts with a letter or the dot not followed by a number.
\item Not a reserved word.
}
}

The objective is to produce variable names that users can handle in the
"usual" way, e.g. that do not require backticks. TODO: highlight how
munging differs from \code{make.names()}, i.e. uses conventions more consistent
with \code{valid_names()} and the tidyverse. TODO: something about suffix
reorganization.
\itemize{
\item Functions that offer a \code{.name_repair} argument accept a user-supplied
function for name repair.
}

All \code{tidy} names are \code{valid}, all \code{valid} names are \code{minimal}.

For each LEVEL in ("minimal", "valid", "tidy"), there is a family of utility
functions:
\itemize{
\item \code{LEVEL_names()} repairs a vector of names
\item \code{set_LEVEL_names()} repairs the names of the input
\item \code{check_LEVEL()} checks a vector of names
\item \code{check_LEVEL_names()} checks the names of the input
}

Each family has 2 * 2 = 4 functions, for all combinations of "repairs vs.
checks" and "works on names vs. on named vector".

\code{repair_names()} is an older function with different renaming
heuristics and is being deprecated. In new code, use \code{as_tibble()} and
specify a \code{.name_repair} strategy.
}
\examples{
# Works for lists and vectors, too:
set_tidy_names(3:5)
set_tidy_names(list(3, 4, 5))

# Clean data frames are left unchanged:
set_tidy_names(mtcars)

# By default, all rename operations are printed to the console:
tbl <- as_tibble(structure(list(3, 4, 5), class = "data.frame"), .name_repair = "none")
set_valid_names(tbl)

# Alternatively, use valid_names() to assign the result manually:
new_names <- valid_names(names(tbl))
rlang::set_names(tbl, new_names)

# Optionally, names can be made syntactic:
tidy_names("a b")
}
